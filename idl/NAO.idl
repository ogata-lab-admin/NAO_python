

module ssr {

  struct ActuatorPosition {
    string name;
    double position; // [rad]
  };

  typedef sequence<ActuatorPosition> ActuatorPositionSeq;


  struct ActuatorPositionArray {
    ActuatorPositionSeq data;
    double fractionSpeed;
  };

  struct StringArray {
    sequence<string> data;
  };

  struct DoubleArray {
    sequence<double> data;
  };

  struct BoolArray {
    sequence<boolean> data;
  };

  interface ALMotion {
    void setAngles(in StringArray name, in DoubleArray value, in double fractionSpeed);
    DoubleArray getAngles(in StringArray name, in boolean useSensors);
    void openHane(in string name);
    void closeHand(in string name);
    
    void setStiffness(in StringArray name, in DoubleArray stiffnesses);
    DoubleArray getStiffness(in StringArray name);

    void rest();
    void wakeUp();

    void moveTo(in double x, in double y, in double theta);
    void moveToward(in double vx, in double vy, in double vtheta);
    DoubleArray getRobotPosition();
    DoubleArray getRobotVelocity();
    void stopMove();
    boolean moveIsActive();
    void waitUntilMoveIsFinished();
    void moveInit();
    void setWalkArmEnabled(in boolean leftArmEnable, in boolean rightArmEnable);
    BoolArray getWalkArmEnabled();

    DoubleArray getPosition(in string name, in long space, in boolean useSensors);
    void setPosition(in string name, in long space, in DoubleArray position, in double fractionMaxSpeed, in long axisMask);
    void setTransform(in string name, in long space, in DoubleArray transform, in double fractionMaxSpeed, in long axisMask);
    DoubleArray getTransform(in string name, in long space, in boolean useSensorValues);
  };

  interface ALTextToSpeech {
    void say(in string stringToSay);
    void setVolume(in double volume);
    double getVolume();
    void setLanguage(in string language);
    string getLanguage();
    StringArray getAvailableLanguages();
  };

};